1.有序二叉树
1.1.树：具有一对多的特性
1.2.二叉树特点：
	1.每个节点最多有两个子节点
	2.单根性：每个子节点有且仅有一个父节点，整棵树只有一个根节点
		左子树：根节点左边的子树
		右子树：根节点右边的子树	
	3.一般用递归函数来处理
1.3.有序二叉树
	1.概念：一般来说，当左子树不为空时，左子树的元素值小于根节点
		当右子树不为空时，右子树的元素值大于根节点
		一句话：不管站在哪个节点上去看，左边总是小于右边
	2.三种遍历方式：
		先序遍历：先处理节点本身的数据->处理左节点->处理右节点(自->左->右)
		中序遍历：处理左节点->然后处理节点本身->处理右节点(左->自->右)
		后序遍历：处理左节点->处理右节点->最后处理节点本身(左->右->自)
	3.应用：用于搜索和查找数据极其方便，又称二叉查找树
1.4.有序二叉树设计的两个结构体
	描述节点属性的结构体
	struct node {
	      int data; //数据
	      struct node *left; //保存左节点的首地址
	      struct node *right; //保存右节点的首地址	      
	};
	描述整棵树的结构体
	struct  tree {
	      struct node *root; //保存根节点的首地址
	      int cnt; //记录有效节点个数
	};
	参见：有序二叉树内存示意图.png
	注意：有序二叉树删除节点九个字：找节点，找新爹，提一级
	

	